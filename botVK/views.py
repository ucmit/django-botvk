from django.views.decorators.csrf import csrf_exempt 
from django.http import HttpResponse
from django.shortcuts import render
import json, vk, random
import sqlite3
import database

# –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –ø–æ —Å–≤–æ–µ–º—É –∫–ª—é—á—É
session = vk.Session(access_token="931d33285661908411a5c25841bdcccee83a1d92181122b9f2b087d688a80aa820659c9d8070c36e0d283")
vkAPI = vk.API(session)

# –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä—Å–∏—è API - 5.103
@csrf_exempt
def bot(request):
	body = json.loads(request.body)
	# –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª —Ç–µ–ª–æ JSON 
	print(body)

	# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
	if body == { "type": "confirmation", "group_id": 194135848 }: # –ë–µ—Ä—ë–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ CallBack API
		return HttpResponse("b940e67c")

	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ "–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	if body["type"] == "message_new":
		
		msg = body["object"]["message"]["text"]
		payload = body["object"]["message"]["payload"]
		userID = body["object"]["message"]["from_id"]
		userInfo = vkAPI.users.get(user_ids = userID, v=5.103)[0]
		answ = ""
		attach = ""		

		if payload == """{"command":"start"}""":
			keyboardStart(request, userID)


		# #–£—á–∏–º –±–æ—Ç–∞ –Ω–æ–≤—ã–º —Å–ª–æ–≤–∞–º
		# if msg[:6] == "/teach":
		# 	pos = msg.find("?")
		# 	newMsg = msg[7:pos].replace(" ", "")
		# 	newAnsw = msg[pos+1:]
		# 	database.insert("answer", ["msg", "answ"], [newMsg, newAnsw])
		# 	answ = "–Ø –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å '{0}', –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–π =)".format(newMsg)

		# if answ == "":
		# 	for i in database.get("answer"):
		# 		if msg == i["msg"]:
		# 			answ = i["answ"]
		# 			break
		# 		else:
		# 			answ = "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ú–æ–∂–µ—à—å –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /teach –ó–ê–ü–†–û–° ? –û–¢–í–ï–¢"

		sendAnswer(userID, answ, attach)

	return HttpResponse("ok")
# ---–ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏---
	

def sendAnswer(userID, answ = "", attach = "", keyboard = ""):
	vkAPI.messages.send(user_id = userID, message = answ, attachment=attach, keyboard=keyboard, random_id = random.randint(1, 99999999999999999), v=5.103)

def keyboardStart(request, userID):
	answ = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
	keyboard = json.dumps({
		"one_time": True,

		"buttons":[[
			{
				"action": {
					"type":"text",
					"label":"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
					"payload": """{"command":"admin"}"""
				},
				"color":"negative"
			}
		]]
	})
	


	sendAnswer(userID, answ, keyboard = keyboard)




# lastMsg = vkAPI.messages.getHistory(user_id = userID, count = 2, v=5.103)["items"][1]["text"]
# if lastMsg == "–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ß—Ç–æ —ç—Ç–æ?":
# 	if msg == "–Å–ª–∫–∞":
# 		answ = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª!"
# 	else: 
# 		answ = "—É—É—É—É—É—É—É—É—É—É...."
# 	msg = ""

# if msg == "/start":
# 	answ = """Hello, there some commands you can use:
# 	1) /cheer [–ß–æ—Ç –∑–∞–±—ã–ª —Å–¥–µ–ª–∞—Ç—åüò°]
# 	2) /dance
# 	3) /say [message]
# 	4) /myName
# 	5) /riddle"""
# elif msg == "/dance":
# 	attach = "doc223329963_541202194"
# elif msg[:4] == "/say":
# 	answ = msg[5:]
# elif msg == "/myName":
# 	answ = "Your name is {0} {1}".format(userInfo["first_name"], userInfo["last_name"])
# elif msg == "/riddle":
# 	answ = "–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ß—Ç–æ —ç—Ç–æ?"

# def confirm(request):
# 	body = json.loads(request.body)
# 	if body == { "type": "confirmation", "group_id": 194135848 }: # –ë–µ—Ä—ë–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ CallBack API
# 		return HttpResponse("2cd42a34")
# 	else:
# 		return HttpResponse("ok")