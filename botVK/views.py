from django.views.decorators.csrf import csrf_exempt 
from django.http import HttpResponse
from django.shortcuts import render
import json, vk, random
import sqlite3
import database

# –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –ø–æ —Å–≤–æ–µ–º—É –∫–ª—é—á—É
session = vk.Session(access_token="931d33285661908411a5c25841bdcccee83a1d92181122b9f2b087d688a80aa820659c9d8070c36e0d283")
vkAPI = vk.API(session)

# –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä—Å–∏—è API - 5.103
@csrf_exempt
def bot(request):
	body = json.loads(request.body)
	# –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª —Ç–µ–ª–æ JSON 
	print(body)

	# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
	if body == { "type": "confirmation", "group_id": 194135848 }: # –ë–µ—Ä—ë–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ CallBack API
		return HttpResponse("8a7bcb98")


	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ "–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	if body["type"] == "message_new":
		# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
		msg = body["object"]["message"]["text"]
		userID = body["object"]["message"]["from_id"]
		userInfo = vkAPI.users.get(user_ids = userID, v=5.103)[0]
		
		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
		if "payload" in body["object"]["message"]:
			payload = body["object"]["message"]["payload"]
			# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ start
			if payload == """{"command":"start"}""":
				keyboardStart(request, userID)
			else:
				# –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
				try:
					gpid = -1
					gpname = ""
					# –í–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É
					if payload == """{"command":"admin"}""":
						gpid = str(1)
						gpname = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
					elif payload == """{"command":"mentor"}""":
						gpid = str(2)
						gpname = "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫"
					elif payload == """{"command":"student"}""":
						gpid = str(3)
						gpname = "–£—á–µ–Ω–∏–∫"
					# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É –∏ —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º
					database.insert("user", ["id, groupId"], [str(userID), gpid])
					speak(request,userID, userInfo, answ = "–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É {0}".format(gpname))
				# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ [–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ]
				except Exception as e:
					speak(request,userID, userInfo, answ = "Error")
		# –ï—Å–ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Ç, –æ–±—â–∞–µ–º—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ 
		else:
			speak(request,userID, userInfo, msg)

	return HttpResponse("ok")
# ---–ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏---
	
# ======================================== –î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ ====================================
# !–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!
def sendAnswer(userID, answ = "", attach = "", keyboard = json.dumps({"buttons":[],"one_time":True})):
	vkAPI.messages.send(user_id = userID, message = answ, attachment=attach, keyboard=keyboard, random_id = random.randint(1, 99999999999999999), v=5.103)

# !–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è!
def speak(request,userID, userInfo = "", msg = "",  answ = "", attach=""):
	# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
	# #–£—á–∏–º –±–æ—Ç–∞ –Ω–æ–≤—ã–º —Å–ª–æ–≤–∞–º
	if msg[:6] == "/teach":
		pos = msg.find("?")
		newMsg = msg[7:pos].replace(" ", "")
		newAnsw = msg[pos+1:]
		database.insert("answer", ["msg", "answ"], [newMsg, newAnsw])
		answ = "–Ø –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å '{0}', –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–π =)".format(newMsg)
	# #–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
	elif msg == "/list":
		answ = database.get("answer", ["msg"])
	# #–£–∑–Ω–∞—Ç—å –≤ –∫–∞–∫–æ–π —è –≥—Ä—É–ø–ø–µ
	elif msg == "/whoAmI":
		answ = """–í—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ {0}""".format(database.getGroup(str(userID))[0]["groupName"])
	# #–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	elif msg == "/whoAreThey":
		answ = """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"""
		for i in database.getGroup():
			answ += """id: {0}, group: {1}\n""".format(i["id"], i["groupName"])
	elif msg == "/changeMe":
		# 1) –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
		database.deleteUser(userID)
		# 2) –í—ã–∑–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 
		keyboardStart(request, userID)
		return 1


	# –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ
	if answ == "":
		for i in database.get("answer"):
			if msg == i["msg"]:
				answ = i["answ"]					
				break
			else:
				answ = "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ú–æ–∂–µ—à—å –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /teach –ó–ê–ü–†–û–° ? –û–¢–í–ï–¢"

	sendAnswer(userID, answ, attach)


# !–§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!
def keyboardStart(request, userID):
	answ = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
	keyboard = json.dumps({
		"one_time": True,
		"buttons":[[
			{
				"action": {
					"type":"text",
					"label":"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
					"payload": """{"command":"admin"}"""
				},
				"color":"negative"
			},
			{
				"action": {
					"type":"text",
					"label":"–ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
					"payload": """{"command":"mentor"}"""
				},
				"color":"positive"
			},
			{
				"action": {
					"type":"text",
					"label":"–£—á–µ–Ω–∏–∫",
					"payload": """{"command":"student"}"""
				},
				"color":"primary"
			}
		]]
	})
	sendAnswer(userID, answ, keyboard = keyboard)





# ========================================================================================================================

# –†–µ–Ω–¥–µ—Ä –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã login.html

lg = {
	"success": False,
	"groups": database.get("groups")
}
@csrf_exempt
def login(request):
	global lg

	if request.method == "GET":
		if request.GET.get("login") == "admin" and request.GET.get("password") == "0000":
			lg["success"] = True

	if request.method == "POST":
		if (request.POST.get("message") and request.POST.get("group")) != None:
			for user in database.getGroup(groupID = request.POST.get("group")):
				sendAnswer(user["id"], answ = request.POST.get("message"))


	return render(request, "login.html", lg)








# =========================================================================================================================
















# lastMsg = vkAPI.messages.getHistory(user_id = userID, count = 2, v=5.103)["items"][1]["text"]
# if lastMsg == "–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ß—Ç–æ —ç—Ç–æ?":
# 	if msg == "–Å–ª–∫–∞":
# 		answ = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª!"
# 	else: 
# 		answ = "—É—É—É—É—É—É—É—É—É—É...."
# 	msg = ""

# if msg == "/start":
# 	answ = """Hello, there some commands you can use:
# 	1) /cheer [–ß–æ—Ç –∑–∞–±—ã–ª —Å–¥–µ–ª–∞—Ç—åüò°]
# 	2) /dance
# 	3) /say [message]
# 	4) /myName
# 	5) /riddle"""
# elif msg == "/dance":
# 	attach = "doc223329963_541202194"
# elif msg[:4] == "/say":
# 	answ = msg[5:]
# elif msg == "/myName":
# 	answ = "Your name is {0} {1}".format(userInfo["first_name"], userInfo["last_name"])
# elif msg == "/riddle":
# 	answ = "–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ß—Ç–æ —ç—Ç–æ?"

